var _user$project$Main$circleToText = function (circle) {
	var s = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'line-height', _1: '0.5'},
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: s,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(circle.id)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: s,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(circle.x)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: s,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(circle.y)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: s,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(circle.isCollided)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: s,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(circle.isSelected)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: s,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(circle.radius)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: s,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(
													_elm_lang$core$Basics$cos(
														_elm_lang$core$Basics$degrees(circle.movementDirection)))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: s,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('-------'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$isTwoCirclesCollided = F2(
	function (c1, c2) {
		var radiusSum = c1.radius + c2.radius;
		var distance = _elm_lang$core$Basics$sqrt(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				Math.pow(c1.x - c2.x, 2),
				Math.pow(c1.y - c2.y, 2)));
		return _elm_lang$core$Native_Utils.cmp(radiusSum, distance) > -1;
	});
var _user$project$Main$isCircleCollided = F2(
	function (circle, model) {
		isCircleCollided:
		while (true) {
			var _p0 = model;
			if (_p0.ctor === '[]') {
				return false;
			} else {
				var _p2 = _p0._1;
				var _p1 = _p0._0;
				if (_elm_lang$core$Native_Utils.eq(_p1.id, circle.id)) {
					var _v1 = circle,
						_v2 = _p2;
					circle = _v1;
					model = _v2;
					continue isCircleCollided;
				} else {
					if (A2(_user$project$Main$isTwoCirclesCollided, _p1, circle)) {
						return true;
					} else {
						var _v3 = circle,
							_v4 = _p2;
						circle = _v3;
						model = _v4;
						continue isCircleCollided;
					}
				}
			}
		}
	});
var _user$project$Main$whiteOrRed = function (circle) {
	return circle.isCollided ? '#FF0000' : '#737373';
};
var _user$project$Main$setSelectedCirclesToMousePosition = F2(
	function (model, mousePosition) {
		var map = function (x) {
			return x.isSelected ? _elm_lang$core$Native_Utils.update(
				x,
				{
					x: _elm_lang$core$Basics$toFloat(mousePosition.x),
					y: _elm_lang$core$Basics$toFloat(mousePosition.y)
				}) : x;
		};
		return A2(_elm_lang$core$List$map, map, model);
	});
var _user$project$Main$diselectCircles = function (model) {
	var map = function (x) {
		return _elm_lang$core$Native_Utils.update(
			x,
			{isSelected: false});
	};
	return A2(_elm_lang$core$List$map, map, model);
};
var _user$project$Main$selectCircle = F2(
	function (model, circle) {
		var map = function (x) {
			return _elm_lang$core$Native_Utils.eq(x.id, circle.id) ? _elm_lang$core$Native_Utils.update(
				x,
				{isSelected: true}) : x;
		};
		return A2(_elm_lang$core$List$map, map, model);
	});
var _user$project$Main$markCollidedCircles = function (model) {
	var map = function (x) {
		return _elm_lang$core$Native_Utils.update(
			x,
			{
				isCollided: A2(_user$project$Main$isCircleCollided, x, model)
			});
	};
	return A2(_elm_lang$core$List$map, map, model);
};
var _user$project$Main$mooveCicles = function (model) {
	var map = function (item) {
		return _elm_lang$core$Native_Utils.update(
			item,
			{
				x: item.x + (_elm_lang$core$Basics$cos(
					_elm_lang$core$Basics$degrees(item.movementDirection)) * item.movementSpeed),
				y: item.y - (_elm_lang$core$Basics$sin(
					_elm_lang$core$Basics$degrees(item.movementDirection)) * item.movementSpeed)
			});
	};
	return A2(_elm_lang$core$List$map, map, model);
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Tick':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SelectCircle':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Main$selectCircle, model, _p3._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DiselectCircles':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$diselectCircles(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetSelectedCirclesToMousePosition':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Main$setSelectedCirclesToMousePosition, model, _p3._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$mooveCicles(
						_user$project$Main$markCollidedCircles(model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$frameUpdated = _elm_lang$core$Native_Platform.incomingPort('frameUpdated', _elm_lang$core$Json_Decode$string);
var _user$project$Main$Circle = F8(
	function (a, b, c, d, e, f, g, h) {
		return {x: a, y: b, radius: c, isSelected: d, id: e, isCollided: f, movementDirection: g, movementSpeed: h};
	});
var _user$project$Main$initModel = {
	ctor: '::',
	_0: A8(_user$project$Main$Circle, 200, 200, 50, false, 1, false, 45, 1),
	_1: {
		ctor: '::',
		_0: A8(_user$project$Main$Circle, 400, 200, 50, false, 2, false, 45, 1),
		_1: {
			ctor: '::',
			_0: A8(_user$project$Main$Circle, 600, 200, 50, false, 3, false, 45, 1),
			_1: {
				ctor: '::',
				_0: A8(_user$project$Main$Circle, 800, 200, 50, false, 4, false, 45, 1),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Main$UpdateFrame = function (a) {
	return {ctor: 'UpdateFrame', _0: a};
};
var _user$project$Main$SetSelectedCirclesToMousePosition = function (a) {
	return {ctor: 'SetSelectedCirclesToMousePosition', _0: a};
};
var _user$project$Main$DiselectCircles = function (a) {
	return {ctor: 'DiselectCircles', _0: a};
};
var _user$project$Main$SelectCircle = function (a) {
	return {ctor: 'SelectCircle', _0: a};
};
var _user$project$Main$circleToSpan = function (circle) {
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onMouseDown(
				_user$project$Main$SelectCircle(circle)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'left',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(circle.x - circle.radius),
								'px')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(circle.y - circle.radius),
									'px')
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'height',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(circle.radius * 2),
										'px')
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(circle.radius * 2),
											'px')
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'background-color',
											_1: _user$project$Main$whiteOrRed(circle)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Main$circleToText, model)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, _user$project$Main$circleToSpan, model)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$millisecond, _user$project$Main$Tick),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_user$project$Main$SetSelectedCirclesToMousePosition),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(_user$project$Main$DiselectCircles),
					_1: {
						ctor: '::',
						_0: _user$project$Main$frameUpdated(_user$project$Main$UpdateFrame),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: _user$project$Main$subscriptions
	})();
